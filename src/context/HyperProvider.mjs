// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as NativeHyperswitchSdk$HyperswitchSdkReactNative from "../modules/NativeHyperswitchSdk.mjs";

var defaultVal = {
  publishableKey: "",
  isInitialized: false
};

var hyperProviderContext = React.createContext([
      defaultVal,
      (function (param) {
          
        })
    ]);

var make = hyperProviderContext.Provider;

var Provider = {
  make: make
};

function initHyperswitch(publishableKey, customBackendUrl, customLogUrl, customParams) {
  return NativeHyperswitchSdk$HyperswitchSdkReactNative.nativeHyperswitchSdk.initialise(publishableKey, customBackendUrl, customLogUrl, customParams);
}

function HyperProvider(props) {
  var customParams = props.customParams;
  var customLogUrl = props.customLogUrl;
  var customBackendUrl = props.customBackendUrl;
  var __publishableKey = props.publishableKey;
  var publishableKey = __publishableKey !== undefined ? __publishableKey : "";
  var match = React.useState(function () {
        return {
                publishableKey: publishableKey,
                customBackendUrl: customBackendUrl,
                customLogUrl: customLogUrl,
                customParams: customParams,
                isInitialized: false
              };
      });
  var setState = match[1];
  var state = match[0];
  var getError = function (errorOpt) {
    var error = errorOpt !== undefined ? errorOpt : "Failed to initialize Hyperswitch";
    var newrecord = Caml_obj.obj_dup(state);
    newrecord.error = error;
    return newrecord;
  };
  var initialise = async function () {
    try {
      await initHyperswitch(publishableKey, customBackendUrl, customLogUrl, customParams);
      return setState(function (param) {
                  var newrecord = Caml_obj.obj_dup(state);
                  newrecord.isInitialized = true;
                  return newrecord;
                });
    }
    catch (raw_obj){
      var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
      if (obj.RE_EXN_ID !== Js_exn.$$Error) {
        return setState(function (param) {
                    return getError(undefined);
                  });
      }
      var error = obj._1.message;
      if (error !== undefined) {
        return setState(function (param) {
                    return getError(error);
                  });
      } else {
        return setState(function (param) {
                    return getError(undefined);
                  });
      }
    }
  };
  React.useEffect((function () {
          if (publishableKey !== "") {
            initialise();
          }
          
        }), [publishableKey]);
  var setState$1 = React.useCallback((function (val) {
          setState(function (param) {
                return val;
              });
        }), [setState]);
  return JsxRuntime.jsx(make, {
              value: [
                state,
                setState$1
              ],
              children: props.children
            });
}

var make$1 = HyperProvider;

export {
  defaultVal ,
  hyperProviderContext ,
  Provider ,
  initHyperswitch ,
  make$1 as make,
}
/* hyperProviderContext Not a pure module */
