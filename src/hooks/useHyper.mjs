// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as HyperProvider$HyperswitchSdkReactNative from "../context/HyperProvider.mjs";
import * as NativeHyperswitchSdk$HyperswitchSdkReactNative from "../modules/NativeHyperswitchSdk.mjs";

function getError(errorOpt) {
  var error = errorOpt !== undefined ? errorOpt : "Unknown error occurred while presenting payment sheet";
  return {
          error: {
            code: "failed",
            message: error
          }
        };
}

async function _initPaymentSession(params) {
  try {
    await NativeHyperswitchSdk$HyperswitchSdkReactNative.nativeHyperswitchSdk.initPaymentSession(Core__Option.getOr(params.paymentIntentClientSecret, ""));
    return {};
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID !== Js_exn.$$Error) {
      return {
              error: "Unexpected error occurred while initializing payment sheet"
            };
    }
    var msg = obj._1.message;
    if (msg !== undefined) {
      return {
              error: msg
            };
    } else {
      return {
              error: "Unknown error occurred while initializing payment sheet"
            };
    }
  }
}

function getData(data, key, fallback) {
  return Core__Option.getOr(Core__Option.flatMap(data, (function (obj) {
                    return Core__Option.flatMap(Js_dict.get(obj, key), Js_json.decodeString);
                  })), fallback);
}

function parsePaymentSheetResult(result) {
  try {
    var match = typeof result;
    var parsed = match === "string" ? JSON.parse(result) : result;
    var decodedObject = Js_json.decodeObject(parsed);
    var status = getData(decodedObject, "status", "failed");
    var errorMessage = getData(decodedObject, "error", "");
    var code = getData(decodedObject, "code", "");
    var typeData = getData(decodedObject, "type", "");
    var message = getData(decodedObject, "message", "failed");
    var paymentResult_error = errorMessage;
    var paymentResult_type = typeData;
    var paymentResult = {
      status: status,
      message: message,
      error: paymentResult_error,
      type: paymentResult_type
    };
    var error_code = code;
    var error_message = errorMessage;
    var error = {
      code: error_code,
      message: error_message
    };
    if (errorMessage !== "") {
      return {
              error: error,
              paymentResult: paymentResult
            };
    } else {
      return {
              paymentResult: paymentResult
            };
    }
  }
  catch (exn){
    return getError("Failed to parse payment sheet result");
  }
}

async function _presentPaymentSheet(params) {
  try {
    var result = await NativeHyperswitchSdk$HyperswitchSdkReactNative.nativeHyperswitchSdk.presentPaymentSheet(params);
    return parsePaymentSheetResult(result);
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID !== Js_exn.$$Error) {
      return getError(undefined);
    }
    var obj$1 = obj._1;
    var match = typeof obj$1;
    if (match === "object") {
      try {
        return parsePaymentSheetResult(obj$1);
      }
      catch (exn){
        var error = obj$1.message;
        if (error !== undefined) {
          return getError(error);
        } else {
          return getError(undefined);
        }
      }
    } else {
      var error$1 = obj$1.message;
      if (error$1 !== undefined) {
        return getError(error$1);
      } else {
        return getError(undefined);
      }
    }
  }
}

function useHyper() {
  var match = React.useContext(HyperProvider$HyperswitchSdkReactNative.hyperProviderContext);
  var contextData = match[0];
  var isReady = contextData.isInitialized && Belt_Option.isNone(contextData.error);
  var initPaymentSession = React.useCallback((function (params) {
          return _initPaymentSession(params);
        }), []);
  var presentPaymentSheet = React.useCallback((function (params) {
          if (isReady) {
            return _presentPaymentSheet(params);
          } else {
            return Promise.resolve(getError("Hyperswitch is not initialized"));
          }
        }), [isReady]);
  return {
          initPaymentSession: initPaymentSession,
          presentPaymentSheet: presentPaymentSheet
        };
}

export {
  getError ,
  _initPaymentSession ,
  getData ,
  parsePaymentSheetResult ,
  _presentPaymentSheet ,
  useHyper ,
}
/* react Not a pure module */
